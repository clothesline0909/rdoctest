var search_data = {"index":{"searchIndex":["bakery","cantsatisfyorder","catalogue","inconsistentcodes","invalidfilepath","invalidorderformat","invalidpackconfig","line","linesolver","orderparser","pack","packfactory","receiptbuilder","object","build()","build_line()","build_pack()","error_line()","get_order()","get_total_quantity()","group_by_quantity()","group_text()","identical_codes?()","new()","new()","new()","new()","parse()","parse_line()","search_by_code()","solve()","summary_text()","total_price()","total_quantity()","valid_config?()","gemfile","gemfile.lock","guardfile","readme","order","invalid_order","order"],"longSearchIndex":["bakery","bakery::cantsatisfyorder","bakery::catalogue","bakery::inconsistentcodes","bakery::invalidfilepath","bakery::invalidorderformat","bakery::invalidpackconfig","bakery::line","bakery::linesolver","bakery::orderparser","bakery::pack","bakery::packfactory","bakery::receiptbuilder","object","bakery::packfactory#build()","bakery::receiptbuilder#build_line()","bakery::packfactory#build_pack()","bakery::receiptbuilder#error_line()","bakery::linesolver#get_order()","bakery::linesolver#get_total_quantity()","bakery::receiptbuilder#group_by_quantity()","bakery::receiptbuilder#group_text()","bakery::receiptbuilder#identical_codes?()","bakery::catalogue::new()","bakery::line::new()","bakery::linesolver::new()","bakery::pack::new()","bakery::orderparser#parse()","bakery::orderparser#parse_line()","bakery::catalogue#search_by_code()","bakery::linesolver#solve()","bakery::receiptbuilder#summary_text()","bakery::receiptbuilder#total_price()","bakery::receiptbuilder#total_quantity()","bakery::packfactory#valid_config?()","","","","","","",""],"info":[["Bakery","","Bakery.html","",""],["Bakery::CantSatisfyOrder","","Bakery/CantSatisfyOrder.html","","<p>This exception is raised when the LineSolver.solve method can&#39;t find a\nsolution for the ordered line. …\n"],["Bakery::Catalogue","","Bakery/Catalogue.html","","<p>This class represents a catalogue of items.\n"],["Bakery::InconsistentCodes","","Bakery/InconsistentCodes.html","","<p>This exception is raised when the ReceiptBuilder.build_line method is\npassed objects with different  …\n"],["Bakery::InvalidFilepath","","Bakery/InvalidFilepath.html","","<p>This exception is raised when the OrderParser#parse method is passed an\ninvalid <code>filepath</code>.\n"],["Bakery::InvalidOrderFormat","","Bakery/InvalidOrderFormat.html","","<p>This exception is raised when the OrderParser#parse method is given an\norder with an incorrect format. …\n"],["Bakery::InvalidPackConfig","","Bakery/InvalidPackConfig.html","","<p>This exception is raised when the PackFactory#build method is passed an\ninvalid array <code>pack_config</code>.\n"],["Bakery::Line","","Bakery/Line.html","","<p>This class represents a line of an order.\n"],["Bakery::LineSolver","","Bakery/LineSolver.html","","<p>This class represents a solver that determines which orderable objects to\ngive to a customer.\n"],["Bakery::OrderParser","","Bakery/OrderParser.html","","<p>This class represents a parser for clients&#39; orders.\n"],["Bakery::Pack","","Bakery/Pack.html","","<p>This class represents a pack of baked goods.\n"],["Bakery::PackFactory","","Bakery/PackFactory.html","","<p>This class represents a utility for creating Packs.\n"],["Bakery::ReceiptBuilder","","Bakery/ReceiptBuilder.html","","<p>This class represents a builder of order receipts for customers.\n"],["Object","","Object.html","",""],["build","Bakery::PackFactory","Bakery/PackFactory.html#method-i-build","(pack_config)","<p>This method builds an array of packs from a <code>pack_config</code> array.\nThe format of pack_config is:\n\n<pre>pack_config ...</pre>\n"],["build_line","Bakery::ReceiptBuilder","Bakery/ReceiptBuilder.html#method-i-build_line","(objects)","<p>This method builds an array of text strings for printing onto the receipt.\nIt accepts an array of orderable …\n"],["build_pack","Bakery::PackFactory","Bakery/PackFactory.html#method-i-build_pack","(config)","<p>This method builds a pack from a <code>config</code> hash.\n"],["error_line","Bakery::ReceiptBuilder","Bakery/ReceiptBuilder.html#method-i-error_line","()","<p>This method returns the message to be printed when an order line could not\nbe fulfilled.\n"],["get_order","Bakery::LineSolver","Bakery/LineSolver.html#method-i-get_order","(objects, quantity)","<p>This is a recursive method that takes an array of <code>objects</code> and\na desired <code>quantity</code>. It returns the objects …\n"],["get_total_quantity","Bakery::LineSolver","Bakery/LineSolver.html#method-i-get_total_quantity","(order)","<p>This method returns the total quantity of items in an <code>order</code>.\n"],["group_by_quantity","Bakery::ReceiptBuilder","Bakery/ReceiptBuilder.html#method-i-group_by_quantity","(objects)","<p>This methods separates <code>objects</code> into groups of differing\nquantities.\n"],["group_text","Bakery::ReceiptBuilder","Bakery/ReceiptBuilder.html#method-i-group_text","(group)","<p>This method builds the text for a <code>group</code> of objects.\n"],["identical_codes?","Bakery::ReceiptBuilder","Bakery/ReceiptBuilder.html#method-i-identical_codes-3F","(objects)","<p>This method determines if all the orderable <code>objects</code> passed\nhave the same code.\n"],["new","Bakery::Catalogue","Bakery/Catalogue.html#method-c-new","(args)","<p>Creates a new catalogue with <code>items</code>.\n"],["new","Bakery::Line","Bakery/Line.html#method-c-new","(args)","<p>Creates a new line with <code>code</code> and <code>quantity</code>.\n"],["new","Bakery::LineSolver","Bakery/LineSolver.html#method-c-new","(args)","<p>Creates a new LineSolver with a <code>catalogue</code>.\n"],["new","Bakery::Pack","Bakery/Pack.html#method-c-new","(args)","<p>Creates a new pack with <code>code</code>, <code>price</code> and\n<code>quantity</code>.\n"],["parse","Bakery::OrderParser","Bakery/OrderParser.html#method-i-parse","(filepath)","<p>This method takes the <code>filepath</code> of a valid order. The order is\nparsed and Line objects are returned.\n<p>This …\n"],["parse_line","Bakery::OrderParser","Bakery/OrderParser.html#method-i-parse_line","(line)","<p>This method parses a line of the text file and returns a Line object.\n<p>This method raises an InvalidOrderFormat …\n"],["search_by_code","Bakery::Catalogue","Bakery/Catalogue.html#method-i-search_by_code","(code)","<p>This method searches the catalogue for all items with a matchine\n<code>code</code>.\n"],["solve","Bakery::LineSolver","Bakery/LineSolver.html#method-i-solve","(line)","<p>This method returns the orderable objects for the customer given a\n<code>line</code> of an order.\n"],["summary_text","Bakery::ReceiptBuilder","Bakery/ReceiptBuilder.html#method-i-summary_text","(objects)","<p>This method builds the summary for an array of <code>objects</code>.\n"],["total_price","Bakery::ReceiptBuilder","Bakery/ReceiptBuilder.html#method-i-total_price","(objects)","<p>This method returns the total price of all the orderable\n<code>objects</code>.\n"],["total_quantity","Bakery::ReceiptBuilder","Bakery/ReceiptBuilder.html#method-i-total_quantity","(objects)","<p>This method returns the total quantity in all the orderable\n<code>objects</code>.\n"],["valid_config?","Bakery::PackFactory","Bakery/PackFactory.html#method-i-valid_config-3F","(config)","<p>This method checks that the <code>config</code> has a valid format.\n<code>config</code> must contain code, price and quantity keys. …\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p># Gems for development. group :development do\n\n<pre>gem &#39;guard&#39;\ngem &#39;guard-rspec&#39; ...</pre>\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  activesupport (5.1.2)\n    concurrent-ruby (~&gt; 1.0, &gt;= 1.0.2) ...</pre>\n"],["Guardfile","","Guardfile.html","","<p>guard :rspec, cmd: &#39;bundle exec rspec&#39; do\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Watch for any changes to spec files and run them again. ...</span>\n</pre>\n"],["README","","README_md.html","","<p>Rdoctest\n<p>Generate docs:\n<p>rdoc –main README.md\n"],["order","","samples/order_txt.html","","<p>10 VS5 14 MB11 13 CF\n"],["invalid_order","","spec/support/invalid_order_txt.html","","<p>invalid\n"],["order","","spec/support/order_txt.html","","<p>5 CODE 10 CODE 5 CODE2\n"]]}}